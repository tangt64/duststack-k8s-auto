---
#
# If the kubernetes cluster have only an one master machine
# 
- name: get token 
  command: kubeadm token create --print-join-command
  delegate_to: "{{ groups['k8s_master'] | first }}"
  register: k8stoken
  when: k8s_proxy_mode == "single"

#
# If the kubernetes cluster has a VIP master machine
#
- name: get token 
  command: kubeadm token create --print-join-command
  delegate_to: "{{ groups['k8s_master'] | first }}"
  register: k8stoken
  when: k8s_proxy_mode == "ipvs"

- name: copy kubelet config file to /etc/sysconfig
  copy:
    src: kubelet
    dest: /etc/sysconfig/kubelet
 
- name: kernel module up for nftables
  command: modprobe "{{ item }}"
  with_items:
    - ip_vs_rr
    - ip_vs_wrr
    - ip_vs_sh
    - ip_vs
    - nf_conntrack_ipv4

- name: restart to kubelet.service
  service:
    name: kubelet
    state: restarted

    #- name: join to the kubernetes cluster
    #  command: "{{ k18stoken.stdout }}"

- name: join to the cluster 
  block:
    - name: apply sysctl
      command: sysctl --system -q

    - name: join to the kubernetes cluster as docker
      shell: |
        {{ k8stoken.stdout }}
      register: node_result
      when: runtime_enviroment == "docker"

    - name: join to the kubernetes cluster as crio
      shell: |
        {{ k8stoken.stdout }} --cri-socket /var/run/crio/crio.sock
      register: node_result
      when: runtime_enviroment == "crio"

    - pause:
        seconds: 30
        prompt: The nodes successfully cluster joined

  rescue:
    - name: reset node
      command: kubeadm reset --force
      no_log: yes
    - debug:
        msg: The nodes has been reseted
      failed_when: ( master_result.rc in [ 1,2 ] )
